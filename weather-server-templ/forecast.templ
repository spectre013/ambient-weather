package main

import (
    "fmt"
    "strings"
)

func getDayOfWeek(datetime string) string {
    return datetime
}

templ forecast(data TemplateData) {

      for _, day := range data.Forecast.Days {
        <div class="forecast-wrap">
            <span>{ getDay(day.Datetime) }</span>
            <div class="forecast-container">
                <div class="forecast-icon"><img src={ getIcon(day.Icon) }/></div>
                <div class={ cssToString("forecast-max", tempColor(day.Tempmax)) }>{ tempDisplay(day.Tempmax, data.Units) }</div>
                <div class={ cssToString("forecast-min", tempColor(day.Tempmin)) }>{ tempDisplay(day.Tempmin, data.Units) }</div>
            </div>
        </div>
    }
}

templ forecastDetail(forecast ForecastImage, css string, units string) {
    <!DOCTYPE html>
        <html lang="en">
            @header(css)
            <body>
            <div class="header">
                <div class="title"><a href="/"><i class="fa-solid fa-house"></i> Lorson Ranch, Colorado Springs, CO</a></div>
                <div class="last-update"> Weekly Forecast</div>
            </div>
            <div class="forecast-detail-wrapper">
            for _,day := range forecast.Days {
            <div class="box-container-forecast">
                <div class="forecast-detail-container">
                  <div class="ficon forecast-detail-icon">
                    <span class="tsunami-warning">{ dateFormat("2006-01-02","Monday",day.Datetime) }</span>
                    <img src={ getIcon(day.Icon) }/>
                  </div>
                  <div class="high">
                    <div class={ tempColor(day.Tempmax) }>

                        { tempDisplay(day.Tempmax, units) }
                    </div>
                  </div>
                  <div class="low">
                     <div class={ tempColor(day.Tempmin) }>
                         { tempDisplay(day.Tempmin, units) }
                     </div>
                  </div>
                  <div class="precip">
                    <div>Precip Amount: { fmt.Sprintf("%.2F", day.Precip) } { rainLabel(units)}</div>
                    <div>Precip Probability: { fmt.Sprintf("%.0f", day.Precipprob) }%</div>
                    <div>Precip Type: { strings.Join(day.Preciptype,",") }</div>
                  </div>
                  <div class="windf">
                    Winds from the { degToCompass(day.Winddir) } at { fmt.Sprintf("%.2f", day.Windspeed) } gusting to { fmt.Sprintf("%.2f", day.Windgust) } { windLabel(units) }
                   </div>
                  <div class="fconditions">
                   { day.Conditions }<br/>
                   { day.Description }

                  </div>
                  <div class="cloud">
                    Cloud Cover: { fmt.Sprintf("%.2f", day.Cloudcover)}%
                  </div>
                </div>
              </div>
            }
            </div>
            </body>
        </html>
}